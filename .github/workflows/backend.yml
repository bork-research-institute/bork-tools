name: Backend CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  backend-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build and validate backend
        run: |
          cd backend
          echo "POSTGRES_URL=dummy" > .env.backend.production
          echo "TWITTER_USERNAME=dummy" >> .env.backend.production
          echo "TWITTER_PASSWORD=dummy" >> .env.backend.production
          echo "TWITTER_EMAIL=dummy" >> .env.backend.production
          echo "TWITTER_DRY_RUN=true" >> .env.backend.production
          echo "OPENAI_API_KEY=dummy" >> .env.backend.production
          echo "DEFAULT_LOG_LEVEL=info" >> .env.backend.production
          echo "HELIUS_API_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PRIVATE_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PUBLIC_KEY=dummy" >> .env.backend.production
          echo "SOLANA_RPC_URL=dummy" >> .env.backend.production
          echo "PINATA_JWT=dummy" >> .env.backend.production
          echo "PINATA_GATEWAY_URL=dummy" >> .env.backend.production
          echo "TEE_MODE=false" >> .env.backend.production
          cd ..
          bun run backend:build

  docker-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create dummy env files for Docker build
        run: |
          cd backend
          echo "POSTGRES_URL=dummy" > .env.backend.production
          echo "TWITTER_USERNAME=dummy" >> .env.backend.production
          echo "TWITTER_PASSWORD=dummy" >> .env.backend.production
          echo "TWITTER_EMAIL=dummy" >> .env.backend.production
          echo "TWITTER_DRY_RUN=true" >> .env.backend.production
          echo "OPENAI_API_KEY=dummy" >> .env.backend.production
          echo "DEFAULT_LOG_LEVEL=info" >> .env.backend.production
          echo "HELIUS_API_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PRIVATE_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PUBLIC_KEY=dummy" >> .env.backend.production
          echo "SOLANA_RPC_URL=dummy" >> .env.backend.production
          echo "PINATA_JWT=dummy" >> .env.backend.production
          echo "PINATA_GATEWAY_URL=dummy" >> .env.backend.production
          echo "TEE_MODE=false" >> .env.backend.production
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: bork-tools:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: backend-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build and analyze backend bundle size
        run: |
          cd backend
          echo "POSTGRES_URL=dummy" > .env.backend.production
          echo "TWITTER_USERNAME=dummy" >> .env.backend.production
          echo "TWITTER_PASSWORD=dummy" >> .env.backend.production
          echo "TWITTER_EMAIL=dummy" >> .env.backend.production
          echo "TWITTER_DRY_RUN=true" >> .env.backend.production
          echo "OPENAI_API_KEY=dummy" >> .env.backend.production
          echo "DEFAULT_LOG_LEVEL=info" >> .env.backend.production
          echo "HELIUS_API_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PRIVATE_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PUBLIC_KEY=dummy" >> .env.backend.production
          echo "SOLANA_RPC_URL=dummy" >> .env.backend.production
          echo "PINATA_JWT=dummy" >> .env.backend.production
          echo "PINATA_GATEWAY_URL=dummy" >> .env.backend.production
          echo "TEE_MODE=false" >> .env.backend.production
          cd ..
          bun run backend:build
          echo "Backend build artifacts:"
          ls -lah backend/dist/ || echo "No dist folder found"
          if [ -d "backend/dist" ]; then
            BACKEND_SIZE=$(du -sh backend/dist | cut -f1)
            echo "Backend bundle size: $BACKEND_SIZE"
            echo "BACKEND_SIZE=$BACKEND_SIZE" >> $GITHUB_ENV
          fi
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            backend/dist/
            shared/dist/
          retention-days: 7
      - name: Add build info to workflow summary
        if: env.BACKEND_SIZE
        run: |
          echo "## ðŸ“¦ Build Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Bundle Size:** \`${{ env.BACKEND_SIZE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build artifacts are available for download in the workflow summary." >> $GITHUB_STEP_SUMMARY
      - name: Comment PR with build info
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && env.BACKEND_SIZE
        continue-on-error: true
        with:
          script: |
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ“¦ Build Analysis\n                \n                **Backend Bundle Size:** \`${{ env.BACKEND_SIZE }}\`\n                \n                Build artifacts are available for download in the workflow summary.\n                `
              });
              console.log('Successfully posted PR comment');
            } catch (error) {
              console.log('Failed to post PR comment:', error.message);
              console.log('Build info is available in the workflow summary instead');
            } 