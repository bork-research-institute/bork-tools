name: Backend CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # Quick backend build validation
  backend-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build and validate backend
        run: |
          # Create minimal env file for build validation
          cd backend
          echo "POSTGRES_URL=dummy" > .env.backend.production
          echo "TWITTER_USERNAME=dummy" >> .env.backend.production
          echo "TWITTER_PASSWORD=dummy" >> .env.backend.production
          echo "TWITTER_EMAIL=dummy" >> .env.backend.production
          echo "TWITTER_DRY_RUN=true" >> .env.backend.production
          echo "OPENAI_API_KEY=dummy" >> .env.backend.production
          echo "DEFAULT_LOG_LEVEL=info" >> .env.backend.production
          echo "HELIUS_API_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PRIVATE_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PUBLIC_KEY=dummy" >> .env.backend.production
          echo "SOLANA_RPC_URL=dummy" >> .env.backend.production
          echo "PINATA_JWT=dummy" >> .env.backend.production
          echo "PINATA_GATEWAY_URL=dummy" >> .env.backend.production
          echo "TEE_MODE=false" >> .env.backend.production
          cd ..
          bun run backend:build

  # Docker build validation on PRs to catch issues before main
  docker-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create dummy env files for Docker build
        run: |
          # Create minimal backend env for Docker build validation
          cd backend
          echo "POSTGRES_URL=dummy" > .env.backend.production
          echo "TWITTER_USERNAME=dummy" >> .env.backend.production
          echo "TWITTER_PASSWORD=dummy" >> .env.backend.production
          echo "TWITTER_EMAIL=dummy" >> .env.backend.production
          echo "TWITTER_DRY_RUN=true" >> .env.backend.production
          echo "OPENAI_API_KEY=dummy" >> .env.backend.production
          echo "DEFAULT_LOG_LEVEL=info" >> .env.backend.production
          echo "HELIUS_API_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PRIVATE_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PUBLIC_KEY=dummy" >> .env.backend.production
          echo "SOLANA_RPC_URL=dummy" >> .env.backend.production
          echo "PINATA_JWT=dummy" >> .env.backend.production
          echo "PINATA_GATEWAY_URL=dummy" >> .env.backend.production
          echo "TEE_MODE=false" >> .env.backend.production

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: bork-tools:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run linting on all packages
        run: bun run lint

      - name: Check formatting on all packages
        run: bun run format

      - name: Run tests (if any)
        run: |
          if [ -f "backend/package.json" ] && grep -q '"test"' backend/package.json; then
            echo "Running backend tests..."
            bun run --cwd backend test || echo "Backend tests failed or not configured"
          fi
          if [ -f "shared/package.json" ] && grep -q '"test"' shared/package.json; then
            echo "Running shared tests..."
            bun run --cwd shared test || echo "Shared tests failed or not configured"
          fi
        continue-on-error: true

  # Build size and bundle analysis (optional)
  build-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: backend-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build and analyze backend bundle size
        run: |
          # Create minimal env for build
          cd backend
          echo "POSTGRES_URL=dummy" > .env.backend.production
          echo "TWITTER_USERNAME=dummy" >> .env.backend.production
          echo "TWITTER_PASSWORD=dummy" >> .env.backend.production
          echo "TWITTER_EMAIL=dummy" >> .env.backend.production
          echo "TWITTER_DRY_RUN=true" >> .env.backend.production
          echo "OPENAI_API_KEY=dummy" >> .env.backend.production
          echo "DEFAULT_LOG_LEVEL=info" >> .env.backend.production
          echo "HELIUS_API_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PRIVATE_KEY=dummy" >> .env.backend.production
          echo "SOLANA_PUBLIC_KEY=dummy" >> .env.backend.production
          echo "SOLANA_RPC_URL=dummy" >> .env.backend.production
          echo "PINATA_JWT=dummy" >> .env.backend.production
          echo "PINATA_GATEWAY_URL=dummy" >> .env.backend.production
          echo "TEE_MODE=false" >> .env.backend.production
          cd ..
          bun run backend:build
          
          # Show build artifacts info
          echo "Backend build artifacts:"
          ls -lah backend/dist/ || echo "No dist folder found"
          
          # Calculate total size
          if [ -d "backend/dist" ]; then
            BACKEND_SIZE=$(du -sh backend/dist | cut -f1)
            echo "Backend bundle size: $BACKEND_SIZE"
            echo "BACKEND_SIZE=$BACKEND_SIZE" >> $GITHUB_ENV
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            backend/dist/
            shared/dist/
          retention-days: 7

      - name: Comment PR with build info
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && env.BACKEND_SIZE
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“¦ Build Analysis
              
              **Backend Bundle Size:** \`${{ env.BACKEND_SIZE }}\`
              
              Build artifacts are available for download in the workflow summary.
              `
            })